# -*- coding: utf-8 -*-
"""STREAMLIT ANALISIS DATA DICODING.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LUl3imvgtGlM4IM4TaS8g3BMyzfD2Ocv
"""

import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Set page config
st.set_page_config(
    page_title="E-commerce Dashboard",
    page_icon="🛍️",
    layout="wide"
)

# Function to load data
@st.cache_data
def load_data():
    return pd.read_csv("C:\\Users\\aallv\\Documents\\GitHub\\modelML\\Project Analisis Data Dicoding\\all_data.csv")

# Main function to run the Streamlit app
def main():    
    st.title("E-commerce Analysis Dashboard")

    # Load data
    try:
        all_data = load_data()

        # Create tabs for different analysis
        tab1, tab2, tab3, tab4 = st.tabs([
            "Product Analysis",
            "Customer Geography",
            "RFM Analysis",
            "Customer Satisfaction"
        ])

        with tab1:
            st.header("Product Analysis")

            # Product sales analysis
            sum_order_items = all_data.groupby('product_category_name_english').product_id.count().reset_index()
            sum_order_items = sum_order_items.sort_values(by='product_id', ascending=False)

            col1, col2 = st.columns(2)

            with col1:
                st.subheader("Top 5 Products")
                fig1 = plt.figure(figsize=(10, 6))
                sns.barplot(
                    data=sum_order_items.head(5),
                    x="product_id",
                    y="product_category_name_english",
                    palette=["#72BCD4"] + ["#D3D3D3"]*4
                )
                plt.title("Highest Product Sales")
                st.pyplot(fig1)

            with col2:
                st.subheader("Bottom 5 Products")
                fig2 = plt.figure(figsize=(10, 6))
                bottom_products = sum_order_items.sort_values(by="product_id", ascending=True).head(5)
                sns.barplot(
                    data=bottom_products,
                    x="product_id",
                    y="product_category_name_english",
                    palette=["#72BCD4"] + ["#D3D3D3"]*4
                )
                plt.title("Lowest Product Sales")
                st.pyplot(fig2)
            
            # Order status
            order_status_counts = all_data['order_status'].value_counts()

            fig10 = plt.figure(figsize=(10, 6))
            sns.barplot(
                x=order_status_counts.index,
                y=order_status_counts.values,
                palette=["#72BCD4"] + ["#D3D3D3"]*4
            )
            plt.title("Order Status Distribution")
            plt.xlabel("Status")
            plt.ylabel("Count")
            plt.xticks(rotation=45)
            st.pyplot(fig10)
            
            with st.expander("See Explanation"):
                st.write('Produk yang paling laris adalah bed_bath_table, sedangkan produk yang tidak laris adalah security_and_services')
                st.write('Status Order Pelanggan paling banyak sudah selesai / sudah sampai di tangan customer (deilevered)')
        with tab2:
            st.header("Customer Geography Analysis")

            # State analysis
            bystate_df = all_data.groupby(by="customer_state").customer_id.nunique().reset_index()
            bystate_df.rename(columns={"customer_id": "customer_count"}, inplace=True)

            fig3 = plt.figure(figsize=(10, 6))
            sns.barplot(
                data=bystate_df.sort_values(by="customer_count", ascending=False).head(),
                x="customer_count",
                y="customer_state",
                palette=["#72BCD4"] + ["#D3D3D3"]*7
            )
            plt.title("Number of Customers by State")
            st.pyplot(fig3)

            # City analysis
            bycity_df = all_data.groupby(by="customer_city").customer_id.nunique().reset_index()
            bycity_df.rename(columns={"customer_id": "customer_count"}, inplace=True)

            fig4 = plt.figure(figsize=(10, 6))
            sns.barplot(
                data=bycity_df.sort_values(by="customer_count", ascending=False).head(),
                x="customer_count",
                y="customer_city",
                palette=["#72BCD4"] + ["#D3D3D3"]*7
            )
            plt.title("Number of Customers by City")
            st.pyplot(fig4)
            
            with st.expander("See Explanation"):
                st.write('Sao Paulo adalah lokasi States dan Kota dengan jumlah Pelanggan Terbanyak')

        with tab3:
            st.header("RFM Analysis")

            # Calculate RFM metrics
            rfm_df = all_data.groupby(by="customer_id", as_index=False).agg({
                "order_purchase_timestamp": "max",
                "order_id": "nunique",
                "payment_value": "sum"
            })
            rfm_df.columns = ["customer_id", "max_order_timestamp", "frequency", "monetary"]

            # Calculate recency
            rfm_df["max_order_timestamp"] = pd.to_datetime(rfm_df["max_order_timestamp"]).dt.date
            recent_date = pd.to_datetime(all_data["order_purchase_timestamp"]).dt.date.max()
            rfm_df["recency"] = rfm_df["max_order_timestamp"].apply(lambda x: (recent_date - x).days)

            # Display RFM metrics
            col3, col4, col5 = st.columns(3)

            with col3:
                fig5 = plt.figure(figsize=(8, 6))
                top_recency = rfm_df.sort_values(by="recency", ascending=True).head(5)
                sns.barplot(y="recency", x="customer_id", data=top_recency, color="#72BCD4")
                plt.title("Top Customers by Recency")
                plt.xticks(rotation=45)
                st.pyplot(fig5)

            with col4:
                fig6 = plt.figure(figsize=(8, 6))
                top_frequency = rfm_df.sort_values(by="frequency", ascending=False).head(5)
                sns.barplot(y="frequency", x="customer_id", data=top_frequency, color="#72BCD4")
                plt.title("Top Customers by Frequency")
                plt.xticks(rotation=45)
                st.pyplot(fig6)

            with col5:
                fig7 = plt.figure(figsize=(8, 6))
                top_monetary = rfm_df.sort_values(by="monetary", ascending=False).head(5)
                sns.barplot(y="monetary", x="customer_id", data=top_monetary, color="#72BCD4")
                plt.title("Top Customers by Monetary")
                plt.xticks(rotation=45)
                st.pyplot(fig7)

            # Calculate and display customer segments
            rfm_df['r_rank_norm'] = (rfm_df['recency'].rank(ascending=False)/rfm_df['recency'].rank(ascending=False).max())*100
            rfm_df['f_rank_norm'] = (rfm_df['frequency'].rank(ascending=True)/rfm_df['frequency'].rank(ascending=True).max())*100
            rfm_df['m_rank_norm'] = (rfm_df['monetary'].rank(ascending=True)/rfm_df['monetary'].rank(ascending=True).max())*100

            rfm_df['RFM_score'] = (0.15*rfm_df['r_rank_norm'] +
                                  0.28*rfm_df['f_rank_norm'] +
                                  0.57*rfm_df['m_rank_norm']) * 0.05

            rfm_df["customer_segment"] = np.where(
                rfm_df['RFM_score'] > 4.5, "Top customers",
                np.where(rfm_df['RFM_score'] > 4, "High value customer",
                np.where(rfm_df['RFM_score'] > 3, "Medium value customer",
                np.where(rfm_df['RFM_score'] > 1.6, 'Low value customers',
                'Lost customers'))))

            customer_segment_df = rfm_df.groupby(by="customer_segment", as_index=False).customer_id.nunique()

            # Order segments for visualization
            customer_segment_df['customer_segment'] = pd.Categorical(
                customer_segment_df['customer_segment'],
                ["Lost customers", "Low value customers", "Medium value customer",
                 "High value customer", "Top customers"]
            )

            fig8 = plt.figure(figsize=(10, 6))
            sns.barplot(
                data=customer_segment_df.sort_values(by="customer_segment", ascending=False),
                x="customer_id",
                y="customer_segment",
                palette=["#D3D3D3"] + ["#72BCD4"] + ["#D3D3D3"]*3
            )
            plt.title("Number of Customers by Segment")
            st.pyplot(fig8)
            
            with st.expander("See Explanation"):
                st.write('Berdasarkan analisis terhadap data pelanggan, terlihat adanya keragaman yang signifikan dalam perilaku konsumen. Terdapat segmen pelanggan yang sangat berharga bagi bisnis, yaitu mereka yang sering berbelanja, dengan nilai transaksi yang tinggi, dan melakukan pembelian secara teratur. Di sisi lain, terdapat juga segmen pelanggan yang kurang aktif dengan frekuensi dan nilai transaksi yang rendah. Sebagian besar pelanggan saat ini tergolong dalam kategori "low value" atau bernilai rendah.')

        with tab4:
            st.header("Customer Satisfaction Analysis")

            # Review scores
            rating = all_data['review_score'].value_counts().sort_index()

            fig9 = plt.figure(figsize=(10, 6))
            sns.barplot(
                x=rating.index,
                y=rating.values,
                palette=["#D3D3D3"]*4 + ["#72BCD4"]
            )
            plt.title("Customer Review Scores")
            plt.xlabel("Review Score")
            plt.ylabel("Count")
            st.pyplot(fig9)
           
            with st.expander("See Explanation"):
                st.write('Jumlah rating terbanyak yang diberikan pelanggan yaitu dengan Skor 5.0')

        st.caption('Copyright (C) Alvin Yoga N. 2024')

    except Exception as e:
        st.error(f"Error loading or processing data: {str(e)}")
        st.write("Please make sure your data file is in the correct location and format.")

if __name__ == "__main__":
    main()